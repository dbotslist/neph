generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: finish these models

model User {
  // Discord user id
  id        String   @id
  // Something about the user
  bio       String?
  //
  bots      Bot[]
  reviews   Review[]
  //
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// TODO: add links to the bot's website, github, etc.
model Bot {
  // Discord bot id
  id               String    @id
  // Avatar of the bot
  avatar           String?
  // Name of the bot
  name             String
  // Bot status
  status           BotStatus @default(PENDING)
  // Description of the bot
  description      String?
  // short description of the bot
  shortDescription String?   @map("short_description")
  // The bot's prefix
  prefix           String?
  //
  owners           User[]
  reviews          Review[]
  //
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("bots")
}

model Review {
  // Review id
  id        Int      @id @default(autoincrement())
  // The bot id
  botId     String   @map("bot_id")
  // The user id
  userId    String   @map("user_id")
  // The review's content
  content   String   @db.Char(2000)
  // The review's rating
  rating    Int      @default(1)
  // The bot that was reviewed
  bot       Bot      @relation(fields: [botId], references: [id])
  // The user that reviewed the bot
  user      User     @relation(fields: [userId], references: [id])
  //
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([botId, userId])
  @@map("reviews")
}

enum BotStatus {
  APPROVED
  PENDING
  DENIED
}
